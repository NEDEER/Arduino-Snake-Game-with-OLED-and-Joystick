/*
  Arduino Snake Game
  Hardware:
    - Arduino Nano
    - Joystick Module (X, Y, Button)
    - OLED Display (SSD1306, 128x64, I2C)

  Wiring:
    OLED:
      VCC -> 5V
      GND -> GND
      SCL -> A5
      SDA -> A4

    Joystick:
      VRx -> A0
      VRy -> A1
      SW  -> D2
      VCC -> 5V
      GND -> GND
*/

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

// OLED display size
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

// Grid size (each cell is 4x4 pixels)
#define CELL_SIZE 4
#define GRID_WIDTH (SCREEN_WIDTH / CELL_SIZE)   // 32
#define GRID_HEIGHT (SCREEN_HEIGHT / CELL_SIZE) // 16

// Joystick pins
#define JOY_X A0
#define JOY_Y A1
#define JOY_SW 2

// OLED reset pin (not used with SSD1306 I2C)
#define OLED_RESET -1

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Snake properties
#define MAX_SNAKE_LENGTH 64

struct Point {
  int8_t x;
  int8_t y;
};

Point snake[MAX_SNAKE_LENGTH];
uint8_t snakeLength = 3;
int8_t dirX = 1; // 1: right, -1: left, 0: no horizontal movement
int8_t dirY = 0; // 1: down, -1: up, 0: no vertical movement

Point food;

unsigned long lastMoveTime = 0;
unsigned long moveInterval = 150; // ms

bool gameOver = false;

// Splash screen bitmap (you can paste your own bitmap content here)
const unsigned char bitmap [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x38, 0x1c, 0x0e, 0x02, 0x3f, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x70, 0x7c, 0x7e, 0x3e, 0x07, 0x7f, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xf0, 0x7c, 0x7e, 0x7e, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x3f, 0xf3, 0xf0, 0xfc, 0xfe, 0x7f, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xf3, 0xf8, 0xfc, 0xfe, 0x3f, 0x3f, 0xfa, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xe3, 0xfc, 0xf9, 0xff, 0x3f, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0xfc, 0xf9, 0xff, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xfe, 0x07, 0xfc, 0xfb, 0xef, 0x7f, 0xfd, 0xe0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xf8, 0x07, 0xfe, 0xfb, 0xef, 0xff, 0xf9, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xf0, 0xff, 0xfe, 0xff, 0xe7, 0xff, 0xf1, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xdf, 0xff, 0xcf, 0xff, 0xf0, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xef, 0xfc, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xfd, 0xff, 0xc7, 0xff, 0xff, 0xef, 0xfc, 0xff, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc3, 0xff, 0xe7, 0xef, 0xfe, 0x7f, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc3, 0xef, 0x03, 0xe7, 0xbe, 0x7e, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x3c, 0x00, 0x07, 0x88, 0x78, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x18, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x03, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfd, 0xef, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf3, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x97, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0xf8, 0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x33, 0x1e, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x07, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xfe, 0xe0, 0x07, 0x60, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x7f, 0xf2, 0xc1, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xfd, 0xe0, 0x27, 0xfb, 0x87, 0xff, 0xfd, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x17, 0x8f, 0x0e, 0x3e, 0x00, 0xe1, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x0f, 0x1f, 0xc0, 0x1f, 0x86, 0x0c, 0xe0, 0x00, 0x36, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0x9d, 0x60, 0x07, 0x8c, 0x19, 0xc3, 0xfe, 0x1c, 0x10, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xdf, 0xff, 0x06, 0x98, 0x73, 0x0f, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xe1, 0x30, 0xe6, 0x1f, 0x7d, 0x8f, 0xc4, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xe0, 0xe1, 0xcc, 0x3c, 0x7f, 0x89, 0xc4, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xe1, 0xc3, 0x08, 0xf9, 0xff, 0xec, 0x23, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xe3, 0x87, 0x18, 0xdb, 0xff, 0xff, 0xa3, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0x3f, 0x07, 0x0e, 0x11, 0x90, 0x3f, 0xf8, 0x61, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xf9, 0x30, 0x4c, 0x1d, 0xf1, 0xd8, 0x00, 0x02, 0xb1, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xfd, 0x7d, 0xd8, 0x3f, 0xf8, 0xf9, 0x00, 0x0d, 0x71, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xbf, 0xd8, 0x7f, 0xfc, 0x7d, 0x1f, 0xff, 0x78, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0xff, 0xbf, 0xf0, 0xff, 0xfe, 0x3f, 0x1f, 0xe5, 0x78, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xff, 0xf8, 0xcf, 0xf0, 0xdf, 0xff, 0x1f, 0x00, 0x05, 0x78, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xdd, 0xfb, 0xf0, 0xdf, 0xff, 0x2f, 0x80, 0x06, 0xf8, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xfb, 0xf0, 0xff, 0xfd, 0xe7, 0xf8, 0x3d, 0xf8, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xfb, 0xf0, 0xbf, 0xff, 0xc3, 0xc0, 0x25, 0xf9, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0x83, 0xc0, 0x07, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xff, 0xfd, 0xef, 0xfc, 0x00, 0x00, 0x07, 0xf0, 0x3f, 0xbf, 0xc0, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xff, 0xff, 0xef, 0xff, 0xc0, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x03, 0xff, 0xd7, 0xfe, 0x1f, 0xff, 0xe1, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


// Function to generate random food position not on the snake
void spawnFood() {
  bool valid = false;
  while (!valid) {
    food.x = random(0, GRID_WIDTH);
    food.y = random(0, GRID_HEIGHT);
    valid = true;
    for (uint8_t i = 0; i < snakeLength; i++) {
      if (snake[i].x == food.x && snake[i].y == food.y) {
        valid = false;
        break;
      }
    }
  }
}

// Function to draw the snake and food
void drawGame() {
  display.clearDisplay();

  // Draw food
  display.fillRect(food.x * CELL_SIZE, food.y * CELL_SIZE, CELL_SIZE, CELL_SIZE, SSD1306_WHITE);

  // Draw snake
  for (uint8_t i = 0; i < snakeLength; i++) {
    display.drawRect(snake[i].x * CELL_SIZE, snake[i].y * CELL_SIZE, CELL_SIZE, CELL_SIZE, SSD1306_WHITE);
  }

  display.display();
}

// Function to check collision with self or wall
bool checkCollision(int8_t x, int8_t y) {
  if (x < 0 || x >= GRID_WIDTH || y < 0 || y >= GRID_HEIGHT) return true;
  for (uint8_t i = 0; i < snakeLength; i++) {
    if (snake[i].x == x && snake[i].y == y) return true;
  }
  return false;
}

// Function to read joystick and update direction
void readJoystick() {
  int xVal = analogRead(JOY_X);
  int yVal = analogRead(JOY_Y);
  int threshold = 200;

  if (abs(xVal - 512) > threshold && abs(dirX) == 0) {
    if (xVal < 400) { dirX = -1; dirY = 0; }
    else if (xVal > 600) { dirX = 1; dirY = 0; }
  } else if (abs(yVal - 512) > threshold && abs(dirY) == 0) {
    if (yVal < 400) { dirX = 0; dirY = -1; }
    else if (yVal > 600) { dirX = 0; dirY = 1; }
  }
}

// Reset game state
void resetGame() {
  snakeLength = 3;
  snake[0] = {GRID_WIDTH / 2, GRID_HEIGHT / 2};
  snake[1] = {GRID_WIDTH / 2 - 1, GRID_HEIGHT / 2};
  snake[2] = {GRID_WIDTH / 2 - 2, GRID_HEIGHT / 2};
  dirX = 1;
  dirY = 0;
  spawnFood();
  gameOver = false;
  lastMoveTime = millis();
}

void setup() {
  pinMode(JOY_SW, INPUT_PULLUP);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    for (;;);
  }

  // Show splash screen with bitmap
  display.clearDisplay();
  display.drawBitmap(0, 0, bitmap, 128, 64, SSD1306_WHITE);
  display.display();

  // Wait for button press
  while (digitalRead(JOY_SW) == HIGH) {
    delay(10);
  }
  delay(300); // Debounce

  // Optional title
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 28);
  display.println("Arduino Snake!");
  display.setCursor(25, 48);
  display.println("NEDERR");
  display.display();
  delay(1500);

  randomSeed(analogRead(A3));
  resetGame();
}

void loop() {
  if (gameOver) {
    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(20, 20);
    display.println("Game Over");
    display.setTextSize(1);
    display.setCursor(25, 48);
    display.println("Press button");
    display.display();

    if (digitalRead(JOY_SW) == LOW) {
      delay(300); // Debounce
      resetGame();
    }
    return;
  }

  readJoystick();

  if (millis() - lastMoveTime > moveInterval) {
    lastMoveTime = millis();

    for (int i = snakeLength - 1; i > 0; i--) {
      snake[i] = snake[i - 1];
    }

    int8_t newX = snake[0].x + dirX;
    int8_t newY = snake[0].y + dirY;

    if (checkCollision(newX, newY)) {
      gameOver = true;
      return;
    }

    snake[0].x = newX;
    snake[0].y = newY;

    if (snake[0].x == food.x && snake[0].y == food.y) {
      if (snakeLength < MAX_SNAKE_LENGTH) {
        snakeLength++;
      }
      spawnFood();
    }

    drawGame();
  }
}
